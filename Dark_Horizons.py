import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import asyncio

# –í–∫–ª—é—á–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –í–æ–ø—Ä–æ—Å—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
from resources import QUIZZES

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user_data = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    keyboard = [
        [InlineKeyboardButton("–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è –ø–æ –∫–Ω–∏–≥–µ", callback_data='–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è –ø–æ –∫–Ω–∏–≥–µ')],
        [InlineKeyboardButton("–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è", callback_data='–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è')],
        [InlineKeyboardButton("–£–∏–ª–ª –∏ –ú–∞—Ä–∫—É—Å", callback_data='–£–∏–ª–ª –∏ –ú–∞—Ä–∫—É—Å')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:', reply_markup=reply_markup)


async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ."""
    query = update.callback_query
    await query.answer()
    topic = query.data

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if query.from_user.id not in user_data:
        user_data[query.from_user.id] = {}

    if topic in user_data[query.from_user.id]:
        await query.edit_message_text(text="–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É.")
        return

    user_data[query.from_user.id][topic] = {'current_question': 0, 'score': 0}
    await ask_question(query, topic)


async def ask_question(query, topic):
    """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_info = user_data[query.from_user.id][topic]
    question_index = user_info['current_question']

    if question_index < len(QUIZZES[topic]):
        question_data = QUIZZES[topic][question_index]
        question_text = question_data["question"]
        options = question_data["options"]

        keyboard = [[InlineKeyboardButton(option.ljust(20), callback_data=str(idx))] for idx, option in
                    enumerate(options)]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text=question_text, reply_markup=reply_markup)
    else:
        score = user_info['score']
        total_questions = len(QUIZZES[topic])

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        category = evaluate_score(score, total_questions)

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        await query.edit_message_text(
            text=f"–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {total_questions} \n{category}")

        # –£–¥–∞–ª–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        del user_data[query.from_user.id][topic]  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ

def evaluate_score(score, total_questions):
    """–û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    percentage = score / total_questions

    if percentage <= 0.1:
        return "–°–∞–ª–ª–∏ —Å–∂–∏–º–∞–µ—Ç –∫—É–ª–∞–∫–∏. –í—ã –µ–º—É –Ω–µ –Ω—Ä–∞–≤–∏—Ç–µ—Å—å. –í–∞—à–∏ –∑–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–≤–ª—è—é—Ç –∂–µ–ª–∞—Ç—å –ª—É—á—à–µ–≥–æ."
    elif percentage <= 0.2:
        return "–°–µ–±–∞—Å—Ç—å—è–Ω –ê—à–µ—Ä –ø–æ—Ç–∏—Ä–∞–µ—Ç —Ä—É–∫–∏. –° —Ç–∞–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –ª–µ–≥–∫–æ–π –¥–æ–±—ã—á–µ–π –≤ '–ë–∏–æ—Ö—Ä–æ–º–µ'!"
    elif percentage <= 0.3:
        return "–Ø —É–≤–µ—Ä–µ–Ω, —Ç—ã –º–æ–∂–µ—à—å –ª—É—á—à–µ! –°–æ–±–µ—Ä–∏—Å—å! (–°)–°–∞–ª–ª–∏ –ë—Ä–∞—É–Ω"
    elif percentage <= 0.4:
        return "–ù–µ–ø–ª–æ—Ö–æ. –í–æ –í–Ω–µ—à–Ω–∏—Ö –∑–µ–º–ª—è—Ö –≤—ã –ø—Ä–æ—Ç—è–Ω—É–ª–∏ –±—ã... –ø–∞—Ä—É –Ω–µ–¥–µ–ª—å."
    elif percentage <= 0.5:
        return "–í–µ—Å—å–º–∞ –Ω–µ–ø–ª–æ—Ö–æ! –° —Ç–∞–∫–∏–º –±–∞–≥–∞–∂–æ–º –∑–Ω–∞–Ω–∏–π –≤—ã –æ–¥–æ–ª–µ–µ—Ç–µ –ª—é–±–æ–≥–æ –º—É—Ç–∞–Ω—Ç–∞!"
    elif percentage <= 0.6:
        return "–í–ø–µ—á–∞—Ç–ª—è–µ—Ç! –ó–Ω–∞–Ω–∏–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –≤—ã–∂–∏—Ç—å –≤ '–ë–∏–æ—Ö—Ä–æ–º–µ'."
    elif percentage <= 0.7:
        return "–í–æ–ª—á—å—è —Å—Ç–∞—è –¥–∞–∂–µ –ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–µ —Å—Ç–∞–Ω–µ—Ç. –í—ã —Å–µ—Ä—å–µ–∑–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫, –≤ –ø—É—Å—Ç—ã–Ω–µ –≤–∞—Å –Ω–µ –¥–æ–≥–Ω–∞—Ç—å!"
    elif percentage <= 0.8:
        return "–ü–∏—Ç–µ—Ä –º–æ–ª—á–∞ —Ö–ª–æ–ø–∞–µ—Ç –≤–∞–º. –° —Ç–∞–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –≤–∞–∂–Ω–æ–π —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã!"
    elif percentage <= 0.9:
        return "–ì–µ–Ω–∏–∞–ª—å–Ω–æ! –í—ã —Ç–æ—á–Ω–æ –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç–µ —É—á–µ–Ω–æ–π —Å—Ç–µ–ø–µ–Ω—å –ø–æ –ø–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å—É?"
    else:
        return "–í—ã - —Ö–æ–¥—è—á–∞—è —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è. –î–∞–∂–µ –ú–∞—Ä–∫—É—Å –∑–Ω–∞–µ—Ç –º–µ–Ω—å—à–µ!"




async def answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    query = update.callback_query
    await query.answer()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –∏–¥–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞
    topic = next((t for t, data in user_data[query.from_user.id].items() if 'current_question' in data), None)
    if topic is None:
        await query.edit_message_text(text="–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    question_index = user_data[query.from_user.id][topic]['current_question']
    question_data = QUIZZES[topic][question_index]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if int(query.data) == question_data['answer']:
        user_data[query.from_user.id][topic]['score'] += 1
        response_message = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ"
    else:
        correct_answer_text = question_data['options'][question_data['answer']]
        response_message = f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer_text}. ‚ùå"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ—Ç–≤–µ—Ç–∞
    await query.edit_message_text(text=response_message)

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    # await asyncio.sleep(5)

    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    user_data[query.from_user.id][topic]['current_question'] += 1

    # –ó–∞–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    await ask_question(query, topic)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = ApplicationBuilder().token("7316829856:AAESMx7FVGWkqyqRtSemsMo-2JZDMZv4-JQ").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(quiz, pattern="^–û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è –ø–æ –∫–Ω–∏–≥–µ$"))
    application.add_handler(CallbackQueryHandler(quiz, pattern="^–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è$"))
    application.add_handler(CallbackQueryHandler(quiz, pattern="^–£–∏–ª–ª –∏ –ú–∞—Ä–∫—É—Å$"))
    application.add_handler(CallbackQueryHandler(answer, pattern=r'^\d+$'))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ run_polling(), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.
    application.run_polling()


if __name__ == '__main__':
    main()
